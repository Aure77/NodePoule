extends layout
block head
  link(rel='stylesheet', href='#{staticsPrefixPath}/css/mytourney.css', type='text/css', media='all')
  link(rel='stylesheet', href='#{staticsPrefixPath}/css/dp_calendar.css', type='text/css', media='all')
  link(rel="stylesheet" href='#{staticsPrefixPath}/css/jquery.modal.css', type='text/css', media='all')

block content
    .row(data-ng-app="npApp")
      div(data-ng-controller="tournamentCtrl")
        .competition-infos
          p.competition-title
              img(src='#{tournament.game.iconRelPath}')
              | #{tournament.game.name}
            p.competition-subtitle #{tournament.prettyStartDate} - #{tournament.prettyEndDate}

        div.row(style='width:100%;')
          a.button-link(href='#{tournament.tournamentId}/participants') Les participants
          a.button-link(href='#rules') Les règles
          a.button-link(href='/games/#{tournament.game._id}') Infos sur le jeu
          - if(tournament.topicId)
            a.button-link(href='#{tournament.topicId}') Topic du tournoi
          a#subscribe.button-link.subscribe(data-ng-if="canSubscribe", data-ng-click="joinTournament()") Je participe!
          a#subscribe.button-link.unsubscribe(data-ng-if="!canSubscribe && !closedRegistrations", data-ng-click="leaveTournament()") Je ne participe plus
          // a.button-link(data-ng-if="closedRegistrations", href='#calendar', id="open-calendar") Agenda

        div.row(style='clear:both;')
        - if(closedRegistrations)
          div(class="bracket-wrapper")
            a(name='participants').section-title Participants
            .competition-brackets
              .bracket    
        - else
          div(class="participants")
            a(name='inscrits').section-title Inscrits
            ul
              li(data-ng-repeat="participant in participants")
                a(data-ng-href='/profile/{{participant.uid}}')
                    img.user-avatar(data-ng-src='{{participant.picture}}')
                    span {{participant.name}}

        div.row(style='clear:both;')
        // - if(closedRegistrations)
        //   div(id="calendar", class="dp_calendar")

        div.row(style='float: left;')
          a(name='rules').section-title Règles
          dl
          - each rule in tournament.rules
            dt.rule-title #{rule.title}
            dd.rule-description !{rule.description}

block js
      script(type='text/javascript', src='//code.jquery.com/ui/1.11.1/jquery-ui.min.js')
      script(type='text/javascript', src='#{staticsPrefixPath}/js/date.js')
      script(type='text/javascript', src='#{staticsPrefixPath}/js/jquery.dp_calendar.min.js')
      script(type='text/javascript', src='#{staticsPrefixPath}/js/jquery.dp_calendar-fr.js')
      script(type='text/javascript', src='#{staticsPrefixPath}/js/underscore-min.js')
      script(type='text/javascript', src='#{staticsPrefixPath}/js/jquery.jsPlumb-1.7.5-min.js')
      script(type='text/javascript', src='#{staticsPrefixPath}/js/mytourney-1.1.js')
      script(type='text/javascript', src='#{staticsPrefixPath}/js/jquery.modal.js')
      script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.js')
      script(type='text/javascript').
        var app = angular.module('npApp', []);

        app.controller('tournamentCtrl', function ($scope, $http, $location) {
          $scope.participants = [];
          $scope.rounds = [];
          $scope.matches = [];
          $scope.closedRegistrations = #{closedRegistrations};
          $scope.canSubscribe = false;

          $scope.getAllParticipants = function(callback) {
            $http.get("#{tournament.tournamentId}/participants").success(function(response) {
              $scope.participants = response.participants;
              $scope.closedRegistrations = response.closedRegistrations;
              $scope.canSubscribe = !response.closedRegistrations && !response.userHasJoinTournament;
              if(typeof callback === "function") {
                callback();
              }
            }).error(errorCallback);
          };

          $scope.getBracket = function(callback) {
            $http.get("#{tournament.tournamentId}/bracket").success(function(response) {
              $scope.participants = response.participants;
              $scope.rounds = response.rounds;
              $scope.matches = response.matches;
              $scope.closedRegistrations = response.closedRegistrations;
              $scope.canSubscribe = !response.closedRegistrations && !response.userHasJoinTournament;
              if(typeof callback === "function") {
                callback();
              }
            }).error(errorCallback);
          };

          $scope.joinTournament = function() {
            console.log("joinTournament");
            $scope.canSubscribe = false;
            $http.get("#{tournament.tournamentId}/join").success(function(response) {
              $scope.getAllParticipants();
            }).error(errorCallback);
          };

          $scope.leaveTournament = function() {
            console.log("leaveTournament");
            $scope.canSubscribe = true;
            $http.get("#{tournament.tournamentId}/leave").success(function(response) {
              $scope.getAllParticipants();
            }).error(errorCallback);
          };

          if(!$scope.closedRegistrations) {
            $scope.getAllParticipants();
          } else {
              $scope.getBracket(function() {
              var Tourney = {
                "participants": $scope.participants,
                "rounds": $scope.rounds,
                "matches": $scope.matches
              };

              //On ne crée le bracket qu'une fois le tournoi commencé
              if(Tourney.participants && Tourney.participants.length > 0) {
                  MyTourney.drawBracket({
                      participants: Tourney.participants, 
                      rounds: Tourney.rounds, 
                      container: $('.bracket'),
                      baseProfileUrl: "#{baseUrl}/profile"
                  });
              }
              //pareil pour l'agenda des matchs
              var events_array = [];
              $.each(Tourney.matches, function(index, match) {
                  var player1 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid1; });
                  var player2 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid2; });
                  events_array.push({
                      startDate: new Date(match.eventDate),
                      title: (player1 ? player1.name : "?") + " vs " + (player2 ? player2.name : "?"),
                      description: "Tour : " + match.round,
                      priority: 1
                  });
              });
              
              $("#calendar").dp_calendar({
                  events_array: events_array,
                  order_by: 1 //1 = Time, 2 = Title, 3 = Priority 
              });
            });
          }
        });
        
        var errorCallback = function(err, status, headers, config) {
            if (status == 302 || status == 401) {
              location.href = headers("Location");
            }
        };

        function showCalendar() {
            $('#calendar').modal({
                closeClass: 'icon-remove',
                closeText: '!'
            });
        }