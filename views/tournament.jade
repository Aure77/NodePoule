extends layout
block head
  link(rel='stylesheet', href='#{staticsPrefixPath}/stylesheets//mytourney.css', type='text/css', media='all')
  link(rel='stylesheet', href='#{staticsPrefixPath}/stylesheets/dp_calendar.css', type='text/css', media='all')
  link(rel="stylesheet" href='#{staticsPrefixPath}/stylesheets/jquery.modal.css', type='text/css', media='all')
  script(type='text/javascript', src='//code.jquery.com/ui/1.11.1/jquery-ui.min.js')
  script(type='text/javascript', src='#{staticsPrefixPath}/javascripts/date.js')
  script(type='text/javascript', src='#{staticsPrefixPath}/javascripts/jquery.dp_calendar.js')
  script(type='text/javascript', src='#{staticsPrefixPath}/javascripts/jquery.dp_calendar-fr.js')
  script(type='text/javascript', src='#{staticsPrefixPath}/javascripts/underscore-min.js')
  script(type='text/javascript', src='#{staticsPrefixPath}/javascripts/jquery.jsPlumb-1.7.4-min.js')
  script(type='text/javascript', src='#{staticsPrefixPath}/javascripts/mytourney.js')
  script(type='text/javascript', src='#{staticsPrefixPath}/javascripts/jquery.modal.js')

block content
    div(data-ng-controller="tournamentCtrl")
      .competition-infos
        p.competition-title
            img(src='#{tournament.game.iconRelPath}')
            | #{tournament.game.name}
          p.competition-subtitle #{tournament.prettyStartDate} - #{tournament.prettyEndDate}

      div(style='width:100%;')
        a.button-link(href='#{tournament.tournamentId}/participants') Les participants
        a.button-link(href='#rules') Les règles
        a.button-link(href='/games/#{tournament.game._id}') Infos sur le jeu
        - if(tournament.topicId)
          a.button-link(href='#{tournament.topicId}') Topic du tournoi
        a#subscribe.button-link.subscribe(data-ng-if="canSubscribe", data-ng-click="joinTournament()") Je participe!
        a#subscribe.button-link.unsubscribe(data-ng-if="!canSubscribe", data-ng-click="leaveTournament()") Je ne participe plus
        a.button-link(data-ng-if="closedRegistrations", href='#calendar', id="open-calendar") Agenda

      div(style='clear:both;')
      - if(closedRegistrations)
        div(class="bracket-wrapper")
          a(name='participants').section-title Participants
          .competition-brackets
            .bracket    
      - else
        div(class="participants")
          a(name='inscrits').section-title Inscrits
          ul
            li(data-ng-repeat="participant in participants")
              a(href='/profile/{{participant.uid}}')
                  img.user-avatar(src='{{participant.picture}}')
                  span {{participant.name}}

      div(style='clear:both;')
      - if(closedRegistrations)
        div(id="calendar", class="dp_calendar")

      div(style='float: left;')
        a(name='rules').section-title Règles
        dl
        - each rule in tournament.rules
          dt.rule-title #{rule.title}
          dd.rule-description !{rule.description}
    script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js')
    script(type='text/javascript').
      var app = angular.module('npApp', []);

      app.controller('tournamentCtrl', function ($scope, $http, $location) {
        $scope.participants = [];
        $scope.rounds = [];
        $scope.matches = [];
        $scope.closedRegistrations = #{closedRegistrations};
        $scope.canSubscribe = false;

        $scope.getAllParticipants = function(callback) {
          $http.get("#{tournament.tournamentId}/participants").success(function(response) {
            $scope.participants = response.participants;
            $scope.closedRegistrations = response.closedRegistrations;
            $scope.canSubscribe = !response.closedRegistrations && !response.userIsRegistered;
            if(typeof callback === "function") {
              callback();
            }
          }).error(errorCallback);
        };

        $scope.getBracket = function(callback) {
          $http.get("#{tournament.tournamentId}/bracket").success(function(response) {
            $scope.participants = response.participants;
            $scope.rounds = response.rounds;
            $scope.matches = response.matches;
            $scope.closedRegistrations = response.closedRegistrations;
            $scope.canSubscribe = !response.closedRegistrations && !response.userIsRegistered;
            if(typeof callback === "function") {
              callback();
            }
          }).error(errorCallback);
        };

        $scope.joinTournament = function() {
          console.log("joinTournament");
          $scope.canSubscribe = false;
          $http.get("#{tournament.tournamentId}/join").success(function(response) {
            $scope.getAllParticipants();
          }).error(errorCallback);
        };

        $scope.leaveTournament = function() {
          console.log("leaveTournament");
          $scope.canSubscribe = true;
          $http.get("#{tournament.tournamentId}/leave").success(function(response) {
            $scope.getAllParticipants();
          }).error(errorCallback);
        };

        if(!$scope.closedRegistrations) {
          $scope.getAllParticipants();
        } else {
          $scope.getBracket(function() {
            var Tourney = {
              "participants": $scope.participants,
              "rounds": $scope.rounds,
              "matches": $scope.matches
            };

            //On ne crée le bracket qu'une fois le tournoi commencé
            if(Tourney.participants && Tourney.participants.length > 0) {
                MyTourney.drawBracket({
                    participants: Tourney.participants, 
                    rounds: Tourney.rounds, 
                    container: $('.bracket'),
                    baseProfileUrl: "#{baseUrl}/profile"
                });
            }
            //pareil pour l'agenda des matchs
            var events_array = [];
            $.each(Tourney.matches, function(index, match) {
            var player1 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid1; });
            var player2 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid2; });
                events_array.push({
                    startDate: new Date(match.eventDate),
                    title: (player1 ? player1.name : "?") + " vs " + (player2 ? player2.name : "?"),
                    description: "Tour : " + match.round,
                    priority: 1
                });
            });
            
            $("#calendar").dp_calendar({
                events_array: events_array,
                order_by: 1 //1 = Time, 2 = Title, 3 = Priority 
            });
          });
        }
      });
      
      var errorCallback = function(err, status, headers, config) {
          if (status == 302 || status == 401) {
            location.href = headers("Location");
          }
      };

      function showCalendar() {
          $('#calendar').modal({
              closeClass: 'icon-remove',
              closeText: '!'
          });
      }

      /*$(function() {  
        $(document).ajaxError(function(event, xhr, ajaxSettings, errorThrown) {
          if (xhr.status == 401) {
            //TODO: ne pas rediriger vers adduser ou autre...
            location.href = xhr.getResponseHeader("Location");
          }
          console.log(JSON.stringify(ajaxSettings) + " : " + errorThrown + " : " + JSON.stringify(xhr));
        });

        //Si le tournoi n'a pas commencé et que les inscriptions sont ouvertes
        if(!#{closedRegistrations}) {
            //On permet l'inscription
            if(#{userIsRegistered}){
                $('#subscribe').html("Je ne participe plus");
                $('#subscribe').removeClass("subscribe");
                $('#subscribe').addClass("unsubscribe");
                $('#subscribe').on("click", function(e) {
                    //supprimer l'utilisateur courant de la liste des participants du tournoi.
                    $.ajax({
                        type: 'GET',
                        url: "#{tournament.tournamentId}/leave",
                        success: updateView
                    });
                    return false;
                });
            }else{
                $('#subscribe').html("Je participe!");
                $('#subscribe').removeClass("unsubscribe");
                $('#subscribe').addClass("subscribe");
                $('#subscribe').on("click", function(e) {
                    //ajouter l'utilisateur courant à la liste des participants du tournoi.
                    $.ajax({
                        type: 'GET',
                        url: "#{tournament.tournamentId}/join",
                        success: updateView
                    }).always(function (jqXHR) {
                        console.log(jqXHR.status);
                    });
                    return false;
                });
            }
            //Et on liste les participants
          } else {
            //On ne crée le bracket qu'une fois le tournoi commencé
            if(Tourney.participants && Tourney.participants.length > 0) {
                MyTourney.drawBracket({
                    participants: Tourney.participants, 
                    rounds: Tourney.rounds, 
                    container: $('.bracket'),
                    baseProfileUrl: "#{baseUrl}/profile"
                });
            }
            //pareil pour l'agenda des matchs
            var events_array = [];
            $.each(Tourney.matches,function(index, match){
            var player1 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid1; });
            var player2 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid2; });
                events_array.push({
                    startDate: new Date(match.eventDate),
                    title: (player1 ? player1.name : "?") + " vs " + (player2 ? player2.name : "?"),
                    description: "Tour : " + match.round,
                    priority: 1
                });
            });
            
            $("#calendar").dp_calendar({
                events_array: events_array,
                order_by: 1 //1 = Time, 2 = Title, 3 = Priority 
            });
          }
      });*/