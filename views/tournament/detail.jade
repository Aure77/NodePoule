extends ../layout

block head
  link(rel='stylesheet', href='/styles/mytourney.css', type='text/css', media='all')
  link(rel='stylesheet', href='/styles/dp_calendar.css', type='text/css', media='all')
  link(rel="stylesheet" href='/styles/jquery.modal.css', type='text/css', media='all')

block content
    -//.row(data-ng-app="npApp")
    .row
      div(data-ng-controller="tournamentCtrl as tCtrl")
        .competition-infos
          p.competition-title
              img(src='#{tournament.game.iconRelPath}', alt='#{tournament.game.name}', title='#{tournament.game.name}')
              | #{title}
            p.competition-subtitle #{tournament.prettyStartDate} - #{tournament.prettyEndDate}

        div.row(style='width:100%;')
          a.button-link(href='#{tournament.tournamentId}/participants') Les participants
          a.button-link(href='#rules', target='_self') Les règles
          a.button-link(href='/games/#{tournament.game.id}') Infos sur le jeu
          - if(tournament.topicId)
            a.button-link(href='#{tournament.topicId}') Topic du tournoi
          a#subscribe.button-link.subscribe(data-ng-if="tCtrl.canSubscribe", data-ng-click="tCtrl.joinTournament()") Je participe!
          a#subscribe.button-link.unsubscribe(data-ng-if="!tCtrl.canSubscribe && !tCtrl.closedRegistrations", data-ng-click="tCtrl.leaveTournament()") Je ne participe plus

        div.row(style='clear:both;')
          div(class="bracket-wrapper", data-ng-if="tCtrl.closedRegistrations")
            a(name='participants').section-title Participants
            .competition-brackets
              .bracket    
          div(class="participants", data-ng-hide="tCtrl.closedRegistrations")
            a(name='inscrits').section-title Inscrits
            ul
              li(data-ng-repeat="participant in tCtrl.participants")
                a(data-ng-href='/profile/{{participant.uid}}')
                    img.user-avatar(data-ng-src='{{participant.picture}}', data-ng-alt='avatar de {{participant.name}}')
                    span {{participant.name}}

        div.row(style='clear:both;')

        div.row(style='float: left;')
          a(name='rules').section-title Règles
          dl
          - each rule in tournament.rules
            dt.rule-title #{rule.title}
            dd.rule-description !{rule.description}

block js
      script(type='text/javascript', src='/js/jquery-ui-1.11.4.min.js')
      script(type='text/javascript', src='/js/date.js')
      script(type='text/javascript', src='/js/jquery.dp_calendar.min.js')
      script(type='text/javascript', src='/js/jquery.dp_calendar-fr.js')
      script(type='text/javascript', src='/js/underscore-min.js')
      script(type='text/javascript', src='/js/jquery.jsPlumb-1.7.5-min.js')
      script(type='text/javascript', src='/js/mytourney-1.1.js')
      script(type='text/javascript', src='/js/jquery.modal.min.js')
      script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0-rc.2/angular.min.js')
      script(type='text/javascript').
        var app = angular.module('npApp', []);
        app.service('TournamentService', function($http, $q) {
          this.getAllParticipants = function(tid) {
            var deferred = $q.defer(); // to handle async response
            $http.get("/json/tournaments/"+tid+"/participants").success(function(response) {
              deferred.resolve({
                participants: response.participants,
                closedRegistrations: response.closedRegistrations,
                canSubscribe: !response.closedRegistrations && !response.userHasJoinTournament
              });
            }).error(deferred.reject);
            return deferred.promise;
          },
          this.getBracket = function(tid) {
            var deferred = $q.defer(); // to handle async response
            $http.get("/json/tournaments/"+tid+"/bracket").success(function(response) {
              deferred.resolve({
                participants: response.participants,
                rounds: response.rounds,
                matches: response.matches,
                closedRegistrations: response.closedRegistrations,
                canSubscribe: !response.closedRegistrations && !response.userHasJoinTournament
              });
            }).error(deferred.reject);
            return deferred.promise;
          },
          this.joinTournament = function(tid) {
            var deferred = $q.defer(); // to handle async response
            $http.get("/json/tournaments/"+tid+"/join").success(function(response) {
              deferred.resolve({canSubscribe: false});
            }).error(deferred.reject);
            return deferred.promise;
          },
          this.leaveTournament = function(tid) {
            var deferred = $q.defer(); // to handle async response
            $http.get("/json/tournaments/"+tid+"/leave").success(function(response) {
              deferred.resolve({canSubscribe: true});
            }).error(deferred.reject);
            return deferred.promise;
          }
        });
        app.controller('tournamentCtrl', function (TournamentService) {
          var _this = this;
          this.tid = '#{tournament.id}';
          this.participants = [];
          this.rounds = [];
          this.matches = [];
          this.closedRegistrations = false;
          this.canSubscribe = false;
          
          this.joinTournament = function() {
            console.log("joinTournament");
            _this.canSubscribe = false;
            TournamentService.joinTournament(_this.tid).then(function(data) {
              //TODO refresh participants
            }).catch(errorCallback);
          };

          this.leaveTournament = function() {
            console.log("leaveTournament");
            _this.canSubscribe = true;
            TournamentService.leaveTournament(_this.tid).then(function() {
              //TODO refresh participants
            }).catch(errorCallback);
          };

          TournamentService.getBracket(_this.tid).then(function(tournament) {
            _this.participants = tournament.participants;
            _this.closedRegistrations = tournament.closedRegistrations;
            _this.canSubscribe = tournament.canSubscribe;
            var Tourney = {
              participants: tournament.participants,
              rounds: tournament.rounds,
              matches: tournament.matches
            };
            //On ne crée le bracket qu'une fois le tournoi commencé
            if(Tourney.participants && Tourney.participants.length > 0) {
              MyTourney.drawBracket({
                participants: Tourney.participants, 
                rounds: Tourney.rounds, 
                container: $('.bracket'),
                baseProfileUrl: "#{sails.config.nodepoule.baseUrl}/profile"
              });
            }
            //pareil pour l'agenda des matchs
            var events_array = [];
            $.each(Tourney.matches, function(index, match) {
              var player1 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid1; });
              var player2 = _.find(Tourney.participants, function (participant) { return participant.uid === match.pid2; });
              events_array.push({
                startDate: new Date(match.eventDate),
                title: (player1 ? player1.name : "?") + " vs " + (player2 ? player2.name : "?"),
                description: "Tour : " + match.round,
                priority: 1
              });
            });
          }).catch(errorCallback);
        });
        
        var errorCallback = function(err, status, headers, config) {
          if (status == 302 || status == 401) {
            location.href = headers("Location");
          } else {
            console.error("TournamentController error", err, status);
          }
        };
